#include <stdio.h> 
#include <string.h> 
#include <stdlib.h> 
#include<math.h>  
 
struct Stack 
{ 
    int top; 
    unsigned capacity; 
    int* array; 
}; 
typedef struct Stack stack;   

stack * creates( unsigned capacity ) 
{ 
   stack * s = (stack *) malloc(sizeof(stack)); 
  
    if (!s)  
        return NULL; 
  
    s->top = -1; 
    s->capacity = capacity; 
  
    s->array = (int*) malloc(s->capacity * sizeof(int)); 
  
    if (!s->array) 
        return NULL; 
    return s; 
} 
int isEmpty(stack * s) 
{ 
    return s->top == -1 ; 
} 

int pop(stack * s) 
{ 
    if (!isEmpty(s)) 
        return s->array[s->top--] ; 
    //return '$'; 
} 
void push(stack * s, int op) 
{ 
    s->array[++s->top] = op; 
} 
  
  

int isDigit(char ch) 
{ 
    return (ch >= '0' && ch <= '9'); 
} 
  
 
int Postfix(char* exp) 
{ 
    int i, op1,op2,p; 
  
     
    stack * s = creates(strlen(exp)); 
    
     for(i=0;i<strlen(exp);i++)
     {
      if(isDigit(exp[i]))
      {
        push(s,exp[i]-'0');
      }
      else
      {
        op2=pop(s);
        op1=pop(s);
        switch(exp[i])
        {
          case '+':push(s,op1+op2);
          break;
          case '-':push(s,op1-op2);
          break;
          case '*':push(s,op1*op2);
          break;
          case '/':push(s,op1/op2);
          break;
          
         /* case '^':p=pow((float)op1,op2);
                   push(s,p);
          break;*/
        }
      }
      }
      return pop(s);
       
} 
  

int main() 
{ 
    char exp[20];
    scanf("%s",exp);
    int res=Postfix(exp); 
    printf("%d",res);
    return 0; 
} 
